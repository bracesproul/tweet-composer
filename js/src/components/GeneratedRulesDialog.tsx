import { useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogTrigger,
} from "./ui/dialog";
import { Button } from "./ui/button";
import { UserRules } from "@/hooks/useGraph";

export interface GeneratedRulesProps {
  isLoadingUserRules: boolean;
  userRules: UserRules | undefined;
}

export function GeneratedRulesDialog(props: GeneratedRulesProps) {
  const { userRules, isLoadingUserRules } = props;
  const [open, setOpen] = useState(false);

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <div
          onClick={() => setOpen(true)}
          className="fixed top-4 right-36 bg-black hover:bg-gray-800 text-white px-4 py-2 rounded-md shadow-sm transition-colors duration-200 cursor-pointer flex items-center space-x-2"
        >
          <p className="text-sm font-light">Generated Rules</p>
        </div>
      </DialogTrigger>
      <DialogContent className="max-w-xl p-8 bg-white rounded-lg shadow-xl">
        <DialogHeader>
          <DialogTitle className="text-3xl font-light text-gray-800">
            Generated Rules
          </DialogTitle>
          <DialogDescription className="mt-2 text-md font-light text-gray-600">
            {isLoadingUserRules
              ? "Loading rules..."
              : userRules?.contentRules || userRules?.styleRules
                ? "Current rules generated by the assistant for content generation."
                : "No rules have been generated yet. Follow the steps below to generate rules."}
          </DialogDescription>
        </DialogHeader>
        <div className="mt-6 max-h-[60vh] overflow-y-auto pr-4 scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
          {isLoadingUserRules ? (
            <div className="flex justify-center items-center h-32">
              <svg
                className="animate-spin h-8 w-8 text-gray-600"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  strokeWidth="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8v8H4z"
                ></path>
              </svg>
            </div>
          ) : userRules?.contentRules || userRules?.styleRules ? (
            <>
              {userRules.styleRules && (
                <div className="mb-6">
                  <h2 className="text-xl font-light text-gray-800 sticky top-0 bg-white py-2 mb-3">
                    Style Rules:
                  </h2>
                  <ul className="list-disc list-inside space-y-2">
                    {userRules.styleRules.map((rule, index) => (
                      <li key={index} className="text-gray-600 font-light">
                        {rule}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
              {userRules.contentRules && (
                <div className="mb-6">
                  <h2 className="text-xl font-light text-gray-800 sticky top-0 bg-white py-2 mb-3">
                    Content Rules:
                  </h2>
                  <ul className="list-disc list-inside space-y-2">
                    {userRules.contentRules.map((rule, index) => (
                      <li key={index} className="text-gray-600 font-light">
                        {rule}
                      </li>
                    ))}
                  </ul>
                </div>
              )}
            </>
          ) : (
            <div className="space-y-4">
              <p className="text-gray-600 font-light">To generate rules:</p>
              <ol className="list-decimal list-inside space-y-2 text-gray-600 font-light">
                <li>Ask the assistant to generate some writing content</li>
                <li>Revise & save, or copy the generated content</li>
                <li>This will trigger rule generation</li>
              </ol>
              <p className="text-gray-600 font-light">
                Once rules are generated, they will appear here.{" "}
                <span className="text-gray-500 text-sm">
                  (You may need to refresh the page first)
                </span>
              </p>
            </div>
          )}
        </div>
        <div className="mt-6 flex justify-end">
          <Button
            onClick={() => setOpen(false)}
            className="bg-black hover:bg-gray-800 text-white px-4 py-2 rounded shadow transition"
          >
            Close
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}
